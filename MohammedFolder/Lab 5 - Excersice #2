/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/8a74fd76-8197-4de2-a49c-0cb260006d44 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String message;
  int temperature;
  bool led;
  bool passiveBuzzer;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "pitches.h"


int PIN_LED = LED_BUILTIN; //define LED pin the led of the sensor of temperature
int sensorD0 = A0; //define sensor digital output
#define PASSIVE_BUZZER_PIN D1

int sensorValue = 0; //define ditial variable val - setpoint of the sensor

// notes in the melody
int melody[] = { NOTE_C5, NOTE_C6, NOTE_C5, NOTE_C6, NOTE_C5, NOTE_C6, NOTE_C5, NOTE_C6 };
int duration = 150; // 150 milliseconds

//transform to kelvin to celsius Function to convert raw sensor reading (0-1023) to estimated temperature in Celsius (assuming linear relationship)
float getTemperatureCelsius(int sensorValue) {
  return (sensorValue * 5.0f) / 1023.0f * 100.0f;
}


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  // Additional setup for ultrasound sensor and passive buzzer
  pinMode(PIN_LED,OUTPUT);
  pinMode(sensorD0, INPUT);     // Set ultrasound echo pin as an input
  pinMode(PASSIVE_BUZZER_PIN, OUTPUT); // Set passive buzzer pin as an output  
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
    sensorValue = analogRead(sensorD0);
  temperature = sensorValue;
  Serial.println(temperature);
  //float temperatureCelsius = getTemperatureCelsius(sensorReading);

  if(sensorValue > 17.0f){
    passiveBuzzer = true;
    playMelody(); // Call function to play the melody
    digitalWrite(PIN_LED,HIGH);
    led = true;
    message = "HOT";
    
  }
  else{
    passiveBuzzer = false;
    digitalWrite(PIN_LED,LOW);
    led = false;
    message = "COLD";
  }
  delay(1000);
  }
void playMelody() {
  for (int thisNote = 0; thisNote < 8; thisNote++) {
    tone(PASSIVE_BUZZER_PIN, melody[thisNote], duration);
    delay(duration * 1.2);  // Pausa entre notas
    noTone(PASSIVE_BUZZER_PIN); // Detener la nota actual antes de pasar a la siguiente
    delay(50);  // Pequeña pausa entre notas
  }
  delay(200); // Pausa después de tocar la melodía completa
}

void onTemperatureChange()  {

  
}
