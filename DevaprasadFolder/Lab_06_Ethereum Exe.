//SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.5.0 <0.8.0;

struct Product                              //Exercise 4
{
    uint id;
    string name;
}

contract Factory                            //Exercise 1
{
    uint idDigits = 16;                     //Exercise 2
    uint idModulus =10**idDigits;           //Exercise 3
    Product [] public products;             //Exercise 5

    function createProduct(string memory _name, uint _id)   //Exercise 6
    private 
    {
      Product memory newProduct = Product(_id, _name);
      uint ProductId = products.length;
      products.push(newProduct);
      emit NewProduct(ProductId, _name, _id);
    }

    function generateRandomId(string memory _str)   //Exercise 7
    private view returns (uint)
    {
      uint rand = uint (keccak256(abi.encodePacked("_str")));
      return rand % idModulus;
    }

    function createRandomProduct(string memory _name)   //Exercise 8
    public 
    {
      uint randId = generateRandomId(_name);
      createProduct(_name, randId);
    }

    event NewProduct (uint indexed ProductId, string _name, uint _id); //Exercise 9
    
    mapping (uint => address) public productToOwner;                   //Exercise 10
    mapping (address => uint) public ownerProductCount;

    function Ownership(uint _productId) 
    public                                                             //Exercise 11
    {
        productToOwner[_productId] = msg.sender;
        ownerProductCount[msg.sender]++;
    }

    function getProductsByOwner(address _owner)                        //Exercise 12
    external view returns (uint[] memory) 
    {
        uint[] memory result = new uint[](ownerProductCount[_owner]);      
        uint counter = 0;
        for (uint i = 0; i < products.length; i++) 
            {
                if (productToOwner[products[i].id] == _owner) 
                {
                    result[counter] = i;
                    counter++;
                }
            }
            return result;
    }

}


                                                                     
    // contracts/Box.sol                                             //Exercise 13  (new contract .sol file)
    // SPDX-License-Identifier: MIT
    pragma solidity >=0.5.0 <0.9.0;

    // Import Ownable from the OpenZeppelin Contracts library
    import "@openzeppelin/contracts/access/Ownable.sol";

    // Make Box inherit from the Ownable contract
    contract Box is Ownable {
        uint256 private _value;

        event ValueChanged(uint256 value);

        constructor() Ownable(msg.sender) {}

        // The onlyOwner modifier restricts who can call the store function
        function store(uint256 value) public onlyOwner 
        {
            _value = value;
            emit ValueChanged(value);
        }

        function retrieve() public view returns (uint256) 
        {
            return _value;
        }
    }


    contract UserValidation                                 //Exercise 14
    {                            
    mapping(uint => uint) public age;

        modifier olderThan(uint _age, uint _userId) 
    {
            require(age[_userId] >= _age, "User must be older than the specified age");
            _;
    }

        function validationUsers(uint _userId) public view olderThan(18, _userId) 
        {
            // Function body intentionally left blank
        }
    }


// SPDX-License-Identifier: Unlicenced                //Exercise 15
pragma solidity >=0.5.0 <0.9.0;
contract DemoContract 
    {
    address public owner;
    struct Receivers 
        {
        string name;
        uint256 tokens;
        }
    mapping(address => Receivers) public users;
    modifier onlyOwner(){
        require(msg.sender == owner);
        _;
    }
    constructor()
    {
        owner = msg.sender;
        users[owner].tokens = 100;
    }
    function double(uint _value) public pure returns (uint)
    {
        return _value*2;
    }
    function register(string memory _name) public
    {
        users[msg.sender].name = _name;
    }
    function giveToken(address _receiver, uint256 _amount) onlyOwner
    public
    {
        require(users[owner].tokens >= _amount);
        users[owner].tokens -= _amount;
        users[_receiver].tokens += _amount;
    }
}
