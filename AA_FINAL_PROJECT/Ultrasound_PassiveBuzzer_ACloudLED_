/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/2b203103-5d00-4012-b2fc-6da2360468b6 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String EMERGENCY;
  int WaterHeight;
  bool led;
  bool passiveBuzzer;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <NewPingESP8266.h>
#include "pitches.h"

#define PIN_RED  D1
#define PASSIVE_BUZZER_PIN D1
#define TRIGGER_PIN D1
#define ECHO_PIN D2
#define MAX_DISTANCE 300

NewPingESP8266 sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);

// notes in the melody
int melody[] = { NOTE_C5, NOTE_C6, NOTE_C5, NOTE_C6, NOTE_C5, NOTE_C6, NOTE_C5, NOTE_C6 };
int duration = 150; // 150 milliseconds

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Additional setup for ultrasound sensor and passive buzzer
  pinMode(TRIGGER_PIN, OUTPUT); // Set ultrasound trigger pin as an output
  pinMode(ECHO_PIN, INPUT);     // Set ultrasound echo pin as an input
  pinMode(PASSIVE_BUZZER_PIN, OUTPUT); // Set passive buzzer pin as an output
  pinMode(PIN_RED,   OUTPUT); //bombillo
}

void loop() {
  
  ArduinoCloud.update();
  unsigned int uS = sonar.ping();
  int distance = uS / US_ROUNDTRIP_CM;
  WaterHeight = distance;
  Serial.println(WaterHeight);
  
  if (distance <=4) 
  {passiveBuzzer = true;
  playMelody(); // Call function to play the melody
  Serial.println(passiveBuzzer);
  digitalWrite(PIN_RED, HIGH);
  led = true;
  EMERGENCY = "PANIK";
  Serial.println(EMERGENCY);
  }
  else 
  {passiveBuzzer = false;
  digitalWrite(PIN_RED, LOW);
  led = false;
  EMERGENCY = "KALM";
  Serial.println(EMERGENCY);
  }
  delay(1000);
  
}

void playMelody() {
  for (int thisNote = 0; thisNote < 8; thisNote++) {
    tone(PASSIVE_BUZZER_PIN, melody[thisNote], duration);
    delay(duration * 1.2);  // Pausa entre notas
    noTone(PASSIVE_BUZZER_PIN); // Detener la nota actual antes de pasar a la siguiente
    delay(50);  // Pequeña pausa entre notas
  }
  delay(200); // Pausa después de tocar la melodía completa
}


/*
  Since WaterHeight is READ_WRITE variable, onWaterHeightChange() is
  executed every time a new value is received from IoT Cloud.
*/

void onWaterHeightChange()  {
  //no sé qué poner aquí :( //

}
