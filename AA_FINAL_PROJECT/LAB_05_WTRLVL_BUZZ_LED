/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/50d765e3-cfd7-404d-889c-0d7036c2fc02 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing
 
  String message;
  int waterlevel;
  bool buzzer;
  bool led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <EasyBuzzer.h>

#define PIN_LED  D2
#define buzzerPin  D1 // Define the pin connected to the buzzer
#define adcPin     A0 // Use A0 for analog pin instead of D1

// Define musical notes frequencies
#define NOTE_DANGER 5000 // Define the frequency for the danger tone

// Define melody and duration
int melody[] = {NOTE_DANGER};
int duration = 500;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
 /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Additional setup buzzer
 pinMode(buzzerPin, OUTPUT);// Set the buzzer pin as an output
 pinMode(PIN_LED, OUTPUT);
}

void loop() {
  ArduinoCloud.update();
  
  int value = analogRead(adcPin);
  
  // Check if the water level is above the allowable limit
  if (value > 450) {
      Serial.println("Water level is above the allowable limit.");
      // Play the danger tone
      tone(buzzerPin, melody[0], duration);
      delay(2000); // Wait for 2 seconds
      noTone(buzzerPin);
      waterlevel = value;
      digitalWrite(PIN_LED, HIGH);
      led = true;
      buzzer = true;
      message = "water";
      Serial.println(message);
    } 
    // Check if the water level is below the minimum limit
  else if (value < 50) {
      Serial.println("Water level is below the minimum limit.");
      waterlevel = value;
      digitalWrite(PIN_LED, LOW);
      led = false;
      buzzer = false;
      message = "no water";
      Serial.println(message);
    }
}
